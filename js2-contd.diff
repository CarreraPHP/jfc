-                        elemId = elem.id,
-                        elemIdArr = elemId.split('-');
-
-                    elemIdArr.pop();
-                    var parenElemId = elemIdArr.join('-')
-                    for (var _nox in parentObjArr) {
-                        if (parentObjArr[_nox].id == parenElemId) {
-                            parentObj = parentObjArr[_nox];
-                        }
-                    }
-
-// 											var cfnSelector = '#' + ((parseInt(curIndex) != cur.length-1) ? (cur[parseInt(curIndex)+1]).id : cur[parseInt(curIndex)].id);
-                    var curFrameNode = ((parseInt(curIndex) != cur.length-1) ? (cur[parseInt(curIndex)+1]) : cur[parseInt(curIndex)]);
-                    var curFrameNode = (cur[parseInt(curIndex)]);
-                    
-                    var _top_diff = 0, //* (max_cnt / 2)
-                        _top_incr = 0; // 180
-                    if (cur.length > 1) {
-                        var _top_init = 0;
-                        if (cur.length % 2 == 0) {
-                            _top_init = 1;
-                        } else {
-                            _top_init = 0;
-                        }
-                        _top_incr = (curIndex - Math.floor(cur.length / 2));
-                        _top_diff = getHeight(curFrameNode) + 50;
-
-                        console.log(_top_incr, _top_diff, parentObj.mockCard.style.top, curMock.style.top);
-                        
-                        if (_top_incr > -1) {
-                            _top_incr = _top_incr + _top_init;
-                            top_diff = getHeight(cur[curIndex]) + 20;
-//                              curMock.style.top = (parentObj ?  parentObj.mockCard.style.top : 0) + (_top_incr * _top_diff);
-                        }else{
-                            _top_diff = getHeight(curFrameNode) * 2 + 20;
-//                             curMock.style.top = (_top_incr * _top_diff) - (parentObj ?  parentObj.mockCard.style.top : 0);
-                        }
-                        curMock.style.top = initial_y;
-                        initial_y += getHeight(curFrameNode) + 100;
-                        curMock.style.left = (parentObj ? parentObj.mockCard.style.left : 0) + 300;
-                        console.log("curIndex , ", curFrameNode, curMock.style.top, curIndex, (curIndex - Math.floor(cur.length/2)), _top_incr);
-                    }else{
-                        curMock.style.left = (parentObj ? parentObj.mockCard.style.left : 0) + 300;
-                        curMock.style.top =  (parentObj ?  parentObj.mockCard.style.top : 0);
-                    
-                    }
-                    // console.log("child - parent position , ", cur[curIndex].position, curMock.position, parentObj.position);
-                }
-                cur[curIndex].mockCard = curMock;
-//                 grid.push(curMock);
-            }
-            
-            if(initial_y > 0){
-//                 var customEvent = new Event('MoveObject');
-//                 customEvent.pos = {
-//                     startX: 0,
-//                     startY: 0,
-//                     endX: 0,
-//                     endY: 0,
-//                     moveX: 0,
-//                     moveY: Math.floor(initial_y / 2),
-//                     isMoving: false,
-//                     dispatchTimer: false,
-//                     transform: false
-//                 };
-//                 document.dispatchEvent(customEvent);
-
-                    for (var curIndex in cur) {
-                        if(cur.length > 1){
-                            cur[curIndex].mockCard.style.top = cur[curIndex].mockCard.style.top - Math.floor(initial_y / 2);
-                        }
-                        grid.push(cur[curIndex].mockCard);                    
-                    }       
-
-                initial_y = 0;
-            }else{
-                grid.push(cur[0].mockCard);
-            }
-
-            nObjIndex++;
-        }
-
-        // transform(grid, 125);
-
-        controls = new TrackballControls( scene, document.querySelector('#container') );
-        controls.rotateSpeed = 0.5;
-        controls.minDistance = 0;
-        controls.maxDistance = 10000;
-
-        setTimeout(function(){
-            drawArrow();
-            transform(grid, 125);
-            console.log("triggered");
-        }, 650);
-
-        window.addEventListener('resize', onWindowResize, false);
-
-    }
-
-    function drawArrow() {
-        function getTopAdjustment(jinObj, options, _u) {
-            var contentHeight = getHeight(jinObj.querySelector('.content')) + getHeight(jinObj.querySelector('.title'));
-            var returnVal = contentHeight + (getHeight(options[_u]) / 2);
-
-            while (_u > 0) {
-                returnVal += getHeight(options[_u - 1]);
-                _u--;
-            }
-            return returnVal;
-        }
-
-        function createArrow(_index, id, parentId, arrowBottomLeftX, arrowTopRightX, arrowBottomLeftY, arrowTopRightY, arrowElemHeight, arrowElemWidth) {                                    
-            var widthPercent = (((_index > 10) ? (_index % 10) : _index) / 1) * 10; //percentage                                    
-            var arrowElm = document.createElement('div');
-
-            arrowElm.id = id + '-arrow';
-            arrowElm.parentId = parentId;
-            arrowElm.style.height = ((arrowElemHeight < 0) ? -arrowElemHeight : arrowElemHeight) + 'px';
-            arrowElm.style.width = ((arrowElemWidth < 0) ? -arrowElemWidth : arrowElemWidth) + 'px';
-            var w1 = Math.floor(arrowElemWidth * (arrowElemWidth < 0 ? -1 : 1)/2),
-                w2 = (arrowElemWidth * (arrowElemWidth < 0 ? -1 : 1)) - w1;
-            arrowElm.innerHTML = [ "<div style=\"width:", w2, "px\"></div>", "<div style=\"width:", w1, "px\"></div>" ].join(''); /* style=\"width:", (widthPercent), "%\" */
-            arrowElm.style.top = (arrowElemHeight < 0) ? arrowBottomLeftY + arrowElemHeight : arrowBottomLeftY; // - (arrowElemWidth / 2) + 20
-            arrowElm.style.left = (arrowTopRightX < arrowBottomLeftX) ? arrowTopRightX : arrowBottomLeftX; // + (arrowBottomLeftX / 2);
-
-            var heightforCompare = ((arrowElemHeight < 0) ? -arrowElemHeight : arrowElemHeight);
-
-            if((arrowTopRightY > arrowBottomLeftY)){
-                    arrowElm.className = " arrow-reverse";
-            }else if((heightforCompare > 10)){
-                    arrowElm.className = " arrow";										
-            }else{
-                    arrowElm.className = " arrow-straight";
-// 										arrowElm.style.height = '3px';
-            }
-
-            var mockCard = createMockCard();
-            mockCard.style.top = (arrowElemHeight < 0 ? arrowBottomLeftY + arrowElemHeight : arrowBottomLeftY)//  + 'px'; //  - (arrowElemWidth / 2) + 20
-            mockCard.style.left = (arrowTopRightX < arrowBottomLeftX) ? arrowTopRightX : arrowBottomLeftX; // + (arrowBottomLeftX / 2);
-
-            if(arrowTopRightX < arrowBottomLeftX){
-                if(arrowElm.className.indexOf("arrow-reverse") !== -1){
-                    arrowElm.className = " arrow";
-                }else if(arrowElm.className.indexOf("arrow") !== -1){
-                    arrowElm.className = " arrow-reverse";
-                }
-            }
-
-            arrowElm.mockCard = mockCard;
-            arrowElm.rawData = {};
