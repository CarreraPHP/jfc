 
         $scope.printChartJson = function(){
-            console.log($scope.editor.chartList);
-            console.log(JSON.stringify($scope.editor.chartList));
+            var res = JSON.parse(angular.toJson($scope.editor));
+            delete res.parsedList;
+            delete res.editList;
+            delete res.internal;
+            delete res.parsedList;
+            angular.forEach(res.chartList, function(v, k){
+                angular.forEach(v.options, function(o, ok){
+                    delete o.internal.yInit;
+                });
+                delete v.internal.mode;
+                delete v.internal.yInit;
+                if(v.type == "Actor"){
+                    delete v.description;
+                    delete v.name;
+                }else {
+                    delete v.actors;
+                }
+                v.internal.class['highlight-node'] = false;
+            });
+            res.id = 'chart' + (new Date()).getTime();
+            console.log(angular.toJson(res));
         }
         
         $scope.$watch('editor.chartList.length', function(newLength, oldLength){
@@ -152,19 +231,26 @@
             })(), 500, true, [item, xCnt, yCnt, yInit, list[xCnt]]);
         };
         
-        $scope.rearrangeOption = function(subitem, item, xCnt, yCnt, cnt, yInit, list){
-            
+        $scope.rearrangeOption = function(subitem, item, xCnt, yCnt, cnt, yInit, list, inc){
+            console.log("rearrange has been called ....", arguments);
             subitem.internal.yInit = yInit;
-            
+
             $timeout((function(){               
                 return function(){
                     function getHeight(elem){
-                        var elemClientRect = elem.getBoundingClientRect();
-                        return elemClientRect.height;
+                        if(elem !== null){
+                            var elemClientRect = elem.getBoundingClientRect();
+                            return elemClientRect.height;
+                        }
+                        return 0;
                     }
                     function getTop(elem){
                         var peerItem = false,
-                            peerList = list[xCnt+1];
+                            c = angular.element(elem),
+                            d = c.scope()
+                        
+                        inc = d.xIndex;
+                        var peerList = list[inc]; //xCnt+
                         for (var i=0; i < peerList.length; i++){
                             
                             if(peerList[i].id == elem.id){
@@ -172,11 +258,13 @@
                                 break;
                             }
                         }
-                        console.log(peerList[i], peerItem.internal.style, peerItem.internal.style.top, parseInt(peerItem.internal.style.top));
+                        console.log(peerList);
+                        console.log(peerItem.internal.style, peerItem.internal.style.top, parseInt(peerItem.internal.style.top));
                         return parseInt(peerItem.internal.style.top);
                     }
                     function getTopAdjustment(elem, options, _u) {
-                        var contentHeight = getHeight(elem.querySelector('.content')) + getHeight(elem.querySelector('.title'));
+                        var contentHeight = 0;
+                        contentHeight = getHeight(elem.querySelector('.content')) + getHeight(elem.querySelector('.title')) + getHeight(elem.querySelector('.actors'));
 //                        console.log(elem.querySelector('.options > div:nth-child(' + (_u+1) + ')'), elem.querySelector('.options > div:nth-child(' + (_u) + ')'))
                         var returnVal = contentHeight + (getHeight(elem.querySelector('.options > div:nth-child(' + (_u+1) + ')')) / 2);
                         while (_u > 0) {
@@ -189,10 +277,11 @@
                     var chartEl = document.getElementById(item.id),
                         height = chartEl.getBoundingClientRect().height,
                         width = chartEl.getBoundingClientRect().width,
-                        arrowEl = document.querySelector('#' + subitem.charts + '-arrow'),
+                        arrowEl = document.querySelector('#' + subitem.id + '-arrow-' + subitem.charts),
                         peerItem = false,
                         peerEl = document.querySelector('#' + subitem.charts),
-                        heightVal = 0;
+                        heightVal = 0,
+                        widthVal = 0;
                 
                     angular.forEach(list, function(yList, yKey){
                         angular.forEach(yList, function(inst, key){
@@ -203,22 +292,53 @@
                     });
                 
                     subitem.internal.style.left = (xCnt * 300 + width) + "px";
-                    subitem.internal.style.width = (parseInt(peerItem.internal.style.left) - parseInt(subitem.internal.style.left)) + "px";
+                    widthVal = (parseInt(peerItem.internal.style.left) - parseInt(subitem.internal.style.left));
                     
                     subitem.internal.style.top = (parseInt(item.internal.style.top) + getTopAdjustment(chartEl, subitem, cnt)) + "px";
                     heightVal = -(parseInt(subitem.internal.style.top) - getTop(peerEl) - (getHeight(peerEl)/2));
                     console.log("heightVal", heightVal, arrowEl);
-                    if(heightVal < -9){
+                    if(heightVal < -15){
                         subitem.internal.style.top = (parseInt(subitem.internal.style.top) + heightVal) + "px";
                         heightVal = heightVal * -1;
                         subitem.internal.class = {'arrow': true, 'arrow-reverse': false, 'arrow-straight': false };
-                    }else if(heightVal > -9 && heightVal < 9){
+                        subitem.internal.style.height = heightVal + "px";
+                    }else if(heightVal > -15 && heightVal < 16){
                         subitem.internal.class = {'arrow': false, 'arrow-reverse': false, 'arrow-straight': true };
+                        subitem.internal.style.height = "15px";
                     }else{
                         subitem.internal.class = {'arrow': false, 'arrow-reverse': true, 'arrow-straight': false };
+                        subitem.internal.style.height = heightVal + "px";
                     }
-                    subitem.internal.style.height = heightVal + "px";
+                    
+                    if(widthVal < 0){                        
+                        subitem.internal.style.left = (parseInt(subitem.internal.style.left) + widthVal) + "px";
+                        widthVal = widthVal * -1;
+                        subitem.internal.class['arrow-flip'] = true;
+                    }else{
+                        subitem.internal.class['arrow-flip'] = false;
+                    }
+                    subitem.internal.style.width = widthVal + "px";
                 };
             })(), 800, true, [subitem, item, xCnt, yCnt, yInit, list[xCnt]]);
         };
+        
+        $scope.selectCard = function(item, pList, editor){
+            
+            angular.forEach(pList, function(yList, yKey){
+                angular.forEach(yList, function(inst, key){
+                    inst.internal.mode = 'display'; 
+                    inst.internal.class['highlight-node'] = false;
+                });
+            });
+            item.internal.class['card'] = true;
+            item.internal.class['highlight-node'] = true;
+            item.internal.mode = 'edit'; 
+            editor.internal.selected = item;
+            editor.editList = [item];
+        };
+        
+        $scope.highlightRelation = function(scope, enable){            
+            var b = angular.element(document.querySelectorAll('[id*=' + scope.subitem.id + '-arrow-' + scope.subitem.charts +'], [id=' + scope.subitem.charts +']'));
+            enable ? b.addClass('highlight-node') : b.removeClass('highlight-node');
+        };
 }
