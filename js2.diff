diff --git a/ngapp/app/controller/HomeController.js b/ngapp/app/controller/HomeController.js
index 05883a1..3ef32ec 100644
--- a/ngapp/app/controller/HomeController.js
+++ b/ngapp/app/controller/HomeController.js
@@ -1,497 +1,3 @@
 function HomeController($scope, $route, $http, $localStorage){
-    var camera, renderer;
-    var controls;
-    var scene = document.querySelector('#container #scene2d');
-
-    var objects = [];
-    var grid = [];
-    var nObjects = [], max_cnt = 0, max_cnt_index = 0, max_height = 0;
-
-    function createMockCard(){
-        return {
-            style: {
-                left: 0,
-                top: 0
-            }
-        };
-    }
-
-    function getHeight(elem){
-            var elemClientRect = elem.getBoundingClientRect();
-            return elemClientRect.height;
-    }
-
-    function getWidth(elem){
-            var elemClientRect = elem.getBoundingClientRect();
-            return elemClientRect.width;
-    }
-
-    function highLightChainLink(optionNode, enable){
-            var optData = optionNode.rawData;
-            if (optData.charts != '') {
-                    var chartNode = optionNode.parentNode.parentNode.parentNode,
-                            chartData = chartNode.rawData,
-                            sElementNode = document.querySelector('#' + optData.charts),
-                            arrowNodeList = document.querySelectorAll('#' + optData.charts + "-arrow"),
-                            arrowNode = arrowNodeList[0];
-
-                            console.log(chartNode.id, chartNode.className);
-
-                    for(var q in arrowNodeList){
-                        if(arrowNodeList[q].parentId == chartNode.id){
-                            arrowNode = arrowNodeList[q];
-                            break;
-                        }
-                    }
-
-                    chartNode.className = enable ? chartNode.className + " highlight-node" : chartNode.className.replace(' highlight-node', "");
-                    sElementNode.className = enable ? sElementNode.className + " highlight-node" : sElementNode.className.replace(' highlight-node', "");
-                    arrowNode.className = enable ? arrowNode.className + " highlight-node" : arrowNode.className.replace(' highlight-node', "");
-            }
-    }
-
-    function handleOptionClick(optionNode) {
-            var optData = optionNode.rawData;
-            if (optData.charts != '') {
-                    var chartNode = optionNode.parentNode.parentNode.parentNode,
-                            chartData = chartNode.rawData,
-                            sElementNode = document.querySelector('#' + optData.charts),
-                            _left = parseInt(chartNode.style.left) - parseInt(sElementNode.style.left),
-                            _top = parseInt(chartNode.style.top) - parseInt(sElementNode.style.top);
-
-                    for (var d in grid) {
-                            grid[d].style.left = parseInt(grid[d].style.left) + _left;
-                            grid[d].style.top  = parseInt(grid[d].style.top) + _top;
-                    }
-                    console.log(grid, _left, _top);
-                    transform(grid, 250);
-            }
-    }
-
-    function createOptHolder() {
-            var details = document.createElement('div');
-            details.className = 'options';
-            return details;
-    }
-
-    function createOptRow() {
-            var detailRow = document.createElement('div');
-            return detailRow;
-    }
-
-    function createOptSiblings(optHolder, opt) {
-            var options = document.createElement('div'),
-                    span = document.createElement('span'),
-                    icoSpan = document.createElement('span');
-
-            icoSpan.className = "fa fa-play";
-            span.innerHTML = opt.name;
-            options.appendChild(span);
-            options.appendChild(icoSpan);
-            options.rawData = opt;
-            options.addEventListener('click', function () {
-                    console.log("Event fired....");
-                    handleOptionClick(this);
-            });
-            options.addEventListener('mouseenter', function () {
-                    console.log("Mouse Event fired....");
-                    highLightChainLink(this, true);
-            });
-            options.addEventListener('mouseleave', function () {
-                    console.log("Mouse Event fired....");
-                    highLightChainLink(this, false);
-            });
-            optHolder.appendChild(options);
-    }
-
-    function createCard(content) {
-            var element = document.createElement('div');
-            element.id = content.id;
-            element.className = 'card';
-            element.rawData = content;
-
-            var title = document.createElement('div');
-            title.className = 'title';
-            title.innerHTML = "<span class=\"fa fa-" + (content.name.toLowerCase() == "actor" ? "user" : "task") + "\"></span>" + content.name;
-            element.appendChild(title);
-
-            var symbol = document.createElement('div');
-            symbol.className = 'content';
-            symbol.innerHTML = content.description;
-            element.appendChild(symbol);
-
-            return element;
-    }
-
-    function parseChartOptions(opts) {
-            var optHolder = createOptHolder(),
-                    optRowArr = [];
-
-            for (var z in opts) {
-                    var opt = opts[z];
-
-                    if (optRowArr.length == 0) {
-                            optRowArr.push(createOptRow());
-                    }
-                    createOptSiblings(optRowArr[0], opt);
-                    optHolder.appendChild(optRowArr.shift());
-            }
-            return optHolder;
-    }
-
-    function parserChartList(lists, z_index) {
-        var scene = document.querySelector('#container #scene2d');
-        for (var z in lists) {
-                var lt = lists[z];
-                var ltCard = createCard(lt);
-// 					console.log("chart : ", z, lt, lt.options);
-                if (lt.options.length > 0) {
-                        ltCard.appendChild(parseChartOptions(lt.options));
-                }
-
-                ltCard.style.left = 0;
-                ltCard.style.top = 0;
-                ltCard.style.zIndex = z_index;
-
-                objects.push(ltCard);
-                scene.appendChild(ltCard);
-        }
-    }
-
-    function beforeParse(){
-        objects = [];
-        grid = [];
-        nObjects = [];
-        max_cnt = 0;
-        max_cnt_index = 0;
-        max_height = 0;
-        scene.innerHTML = "";
-    }
-
-    function domLoad() {
-        document.addEventListener('MoveObject', function (event) {
-//            console.log("Move Object custom method...", grid, objects, event.pos.moveY, event.pos.startY, event.pos.endY);
-
-            for (_n in grid) {
-//                console.log(parseInt(grid[_n].style.left), grid[_n].style.left, parseInt(grid[_n].style.top), grid[_n].style.top);
-                grid[_n].style.left = (parseInt(grid[_n].style.left) + event.pos.moveX) + "px";
-                grid[_n].style.top  = (parseInt(grid[_n].style.top) - event.pos.moveY) + "px";
-            }
-            if(event.pos.transform){
-                transform(grid, 125);    
-            }
-        });
-
-        init();
-        animate();
-    }
-    
-    function init() {
-        for (var y in objects) {
-            var x = objects[y],
-                x_id = x.id,
-                v = x_id.split('-'),
-                u = v.length - 1;
-
-            if (u in nObjects) {
-                nObjects[u].push(x);
-            } else {
-                nObjects[u] = [x];
-            }
-        }
-
-        for (var w in nObjects) {
-            var wObjectArr = nObjects[w];
-            // should be calculated before calculating the 
-            max_cnt_index = (wObjectArr.length > max_cnt) ? w : max_cnt_index;
-            max_cnt = (wObjectArr.length > max_cnt) ? wObjectArr.length : max_cnt;
-        }
-
-        max_top = (max_cnt * 180) / 2;
-//                                console.log("%c  [max_cnt_index, max_cnt, max_top, max_height]", "color:red;font-size:18px;", max_cnt_index, max_cnt, max_top, max_height);
-
-        var cnObjects = [], cardStart = true, _left = 0, _top = 0, _z = 0, nObjIndex = 0;
-        //reset object for handling the shuffled arrangements of grid array.
-        objects = [];
-
-        for (var _ci in nObjects) {
-            cnObjects[_ci] = [];
-            if (nObjects[_ci].length > 0) {
-                for (var _cj in nObjects[_ci]) {
-                    cnObjects[_ci][_cj] = nObjects[_ci][_cj];
-                    objects.push(nObjects[_ci][_cj]);
-                }
-            }
-        }
-
-        // Approach 2: starting from last child and span out to the parent.
-
-        while (cnObjects.length !== 0) {
-            var cur = cnObjects.shift(),
-                initial_y = 0;
-            
-            // cur is the list of cards in the same level.
-            for (var curIndex in cur) {
-                var curMock = createMockCard();
-                cur[curIndex].mockCard = curMock;
-
-                if (cur.length == 1 && cardStart) {
-                    _left = 0;
-                    _top = 0;
-                    curMock.style.left = 0; //-650;
-                    curMock.style.top = 0;
-                    cardStart = false;
-                } else {
-                    var parentObj = false,
-                        parentObjArr = nObjects[nObjIndex - 1],
-                        elem = cur[curIndex],
